{"version":3,"file":"static/js/698.760cf4bb.chunk.js","mappings":"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","sources":["components/Form/Form.styled.jsx","components/Form/Input.styled.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/ShowPassword/ShowPassword.styled.jsx","components/ShowPassword/ShowPassword.jsx","components/Styled/AuthPage.styled.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { colors } from 'constants';\nimport { mediaSizes } from 'constants/media';\nimport { NavLink } from 'react-router-dom';\n\nexport const Caption = styled.h1`\n  margin-top: 0;\n  margin-bottom: 18px;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 1.2;\n  letter-spacing: -0.02em;\n  color: ${colors.color7};\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    text-align: left;\n    margin-bottom: 50px;\n    font-size: 28px;\n  }\n`;\n\nexport const Label = styled.span`\n  position: relative;\n  margin: 0;\n  margin-right: auto;\n  font-family: 'Verdana';\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.2;\n  letter-spacing: 0.04em;\n  color: ${colors.color2};\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    flex-direction: row;\n    gap: 32px;\n  }\n\n  & .button {\n    height: 45px;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      height: 56px;\n    }\n  }\n`;\n\nexport const BottomLink = styled(NavLink)`\n  font-size: 14px;\n  line-height: 1.5;\n  color: ${colors.color7};\n  margin-top: 18px;\n  text-decoration: underline;\n  font-weight: 400;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    font-size: 16px;\n  }\n\n  @media screen and (min-width: ${mediaSizes.desktop}) {\n    position: relative;\n    left: 183px;\n  }\n`;\n","import styled from '@emotion/styled';\nimport { mediaSizes } from 'constants';\nimport { colors } from 'constants';\nimport { hexToRgb } from 'helpers';\n\nexport const Label = styled.label`\n  display: block;\n  width: 100%;\n`;\n\nexport const Title = styled.div`\n  font-size: 18px;\n  font-weight: 300;\n`;\n\nexport const InputStyled = styled.input`\n  width: 100%;\n  height: 20px;\n  font-size: 16px;\n  border: none;\n  border-bottom: 1px solid ${colors.color3};\n  padding: 12px 16px;\n  outline: none;\n  background-color: #fff;\n`;\n\nexport const InputWraper = styled.div`\n  width: 100%;\n  position: relative;\n  margin-bottom: 30px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n  }\n\n  & input {\n    width: 100%;\n    height: 100%;\n    color: ${colors.color7};\n    border: 1px solid rgba(${hexToRgb(colors.color7)}, 0.3);\n    background-color: transparent;\n    border-radius: 6px;\n    height: 45px;\n    padding-left: 38px;\n    font-size: 16px;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      font-size: 18px;\n      height: 59px;\n      padding-left: 50px;\n    }\n\n    &:focus {\n      outline: none;\n    }\n\n    &:focus + label {\n      color: rgba(${hexToRgb(colors.color7)}, 0.3);\n    }\n\n    &:not(:placeholder-shown) + label {\n      transform: translateY(-22px);\n      color: rgba(${hexToRgb(colors.color7)}, 0.5);\n      left: 35px;\n      padding-left: 5px;\n      font-size: 12px;\n      background-color: ${colors.color6};\n\n      @media screen and (min-width: ${mediaSizes.tablet}) {\n        transform: translateY(-32px);\n        font-size: 14px;\n        left: 47px;\n      }\n    }\n  }\n\n  &.error input {\n    border: 1px solid ${colors.color10};\n  }\n  &.success input {\n    border: 1px solid ${colors.color18};\n  }\n\n  & label {\n    position: absolute;\n    bottom: 12px;\n    left: 40px;\n    pointer-events: none;\n    font-size: 14px;\n    color: rgba(${hexToRgb(colors.color7)}, 0.8);\n    transition: all 0.3s ease;\n    font-weight: 400;\n    letter-spacing: -0.02em;\n    line-height: 1.5;\n    padding-right: 5px;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      font-size: 18px;\n      left: 52px;\n      bottom: 16px;\n    }\n  }\n\n  & .error {\n    position: absolute;\n    bottom: -18px;\n    font-size: 12px;\n    color: ${colors.color1};\n  }\n\n  &.error .error {\n    color: ${colors.color10};\n  }\n\n  & .icon {\n    position: absolute;\n    top: 12px;\n    left: 14px;\n    stroke: #fff;\n    width: 20px;\n    height: 20px;\n    opacity: 0.8;\n    stroke-width: 1.2;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      top: 16px;\n      left: 18px;\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n  &.error .icon {\n    stroke: ${colors.color10};\n    opacity: 1;\n  }\n  &.success .icon {\n    stroke: ${colors.color18};\n    opacity: 1;\n  }\n\n  & .icon-error {\n    position: absolute;\n    top: 12px;\n    right: 14px;\n    fill: ${colors.color10};\n    width: 20px;\n    height: 20px;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      top: 16px;\n      right: 18px;\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n  & .icon-success {\n    position: absolute;\n    top: 12px;\n    right: 14px;\n    fill: ${colors.color18};\n    width: 20px;\n    height: 20px;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      top: 16px;\n      right: 18px;\n      width: 24px;\n      height: 24px;\n    }\n  }\n`;\n","import styled from '@emotion/styled';\nimport { colors } from 'constants';\n\nexport const MessageStyled = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  margin-top: 30px;\n\n  & div {\n    color: ${colors.color7};\n    border-radius: 5px;\n    font-size: 18px;\n    margin-bottom: 10px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 7px 16px;\n    border-radius: 15px;\n    font-size: 14px;\n    font-weight: 500;\n    background-image: repeating-linear-gradient(\n      135deg,\n      rgba(255, 255, 42555, 0.1),\n      rgba(255, 255, 255, 0.1) 5px,\n      rgba(255, 255, 255, 0) 5px,\n      rgba(255, 255, 255, 0) 10px\n    );\n\n    & svg {\n      width: 22px;\n      height: 22px;\n      stroke: ${colors.color10};\n      fill: ${colors.color10};\n    }\n  }\n`;\n\n//\n","import { MessageStyled } from './Message.styled';\nimport { IoWarningOutline } from 'react-icons/io5';\n\nconst Message = ({ children }) => {\n  return (\n    <MessageStyled>\n      <div>\n        <IoWarningOutline />\n        {children}\n      </div>\n    </MessageStyled>\n  );\n};\n\nexport default Message;\n","import styled from '@emotion/styled';\nimport { mediaSizes } from 'constants';\nimport { colors } from 'constants';\nimport { hexToRgb } from 'helpers';\nimport { BsFillEyeFill } from 'react-icons/bs';\nimport { BsFillEyeSlashFill } from 'react-icons/bs';\n\nexport const ShowPasswordButton = styled.button`\n  position: absolute;\n  bottom: 5px;\n  right: 7px;\n  border: none;\n  background-color: transparent;\n  padding: 5px;\n  cursor: pointer;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    bottom: 10px;\n    right: 12px;\n  }\n`;\n\nexport const ShowIcon = styled(BsFillEyeFill)`\n  width: 18px;\n  height: 18px;\n  fill: rgba(${hexToRgb(colors.color7)}, 0.5);\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const HideIcon = styled(BsFillEyeSlashFill)`\n  width: 18px;\n  fill: rgba(${hexToRgb(colors.color7)}, 0.5);\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    width: 20px;\n    height: 20px;\n  }\n`;\n","import {\n  ShowPasswordButton,\n  ShowIcon,\n  HideIcon,\n} from './ShowPassword.styled.jsx';\n\nconst ShowPassword = ({ isShown, clickHandler }) => {\n  return (\n    <ShowPasswordButton type=\"button\" onClick={clickHandler}>\n      {isShown ? <HideIcon /> : <ShowIcon />}\n    </ShowPasswordButton>\n  );\n};\n\nexport default ShowPassword;\n","import styled from '@emotion/styled';\nimport { colors } from 'constants';\nimport { mediaSizes } from 'constants';\n\nexport const AuthPageStyled = styled.div`\n  position: relative;\n  overflow: hidden;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n  }\n\n  &::before {\n    content: '';\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    height: 100%;\n    width: 100%;\n    background-color: ${colors.color9};\n    z-index: 0;\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: calc(305px + 30px);\n    left: 50%;\n    transform: translate(-50%, -100%);\n    border-radius: 50%;\n    height: 3000px;\n    width: 3000px;\n    background-color: ${colors.color7};\n    z-index: 0;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      height: 2500px;\n      width: 2500px;\n      top: 500px;\n    }\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      height: 7500px;\n      width: 7500px;\n      top: 600px;\n    }\n  }\n\n  & img.bg {\n    position: absolute;\n    top: 87px;\n    left: 50%;\n    transform: translateX(-50%);\n    height: 250px;\n    width: auto;\n    z-index: 1;\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      top: 98px;\n      height: 359px;\n    }\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      transform: translateX(-500px);\n      top: 315px;\n    }\n  }\n`;\n","import styled from '@emotion/styled';\nimport { colors } from 'constants';\nimport { mediaSizes } from 'constants/media';\nimport { container } from 'helpers';\n\nexport const LoginFormStyled = styled.div`\n  ${container};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  z-index: 1;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    max-width: 500px;\n  }\n\n  & .form {\n    width: 100%;\n    background-color: ${colors.color6};\n    padding: 32px 28px 40px 28px;\n    margin-top: 305px;\n    border-radius: 30px;\n    box-shadow: 0px 4px 48px rgba(0, 0, 0, 0.1);\n\n    @media screen and (min-width: ${mediaSizes.tablet}) {\n      margin-top: 444px;\n      padding: 44px 50px 44px 50px;\n    }\n    @media screen and (min-width: ${mediaSizes.desktop}) {\n      margin-top: 322px;\n      margin-left: 360px;\n    }\n  }\n`;\n\nexport const FormFields = styled.div`\n  margin-bottom: 28px;\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    max-width: 100%;\n  }\n`;\n","import {\n  Caption,\n  ButtonContainer,\n  BottomLink,\n} from 'components/Form/Form.styled';\nimport { InputWraper } from 'components/Form/Input.styled';\nimport { Button } from 'components/Styled';\nimport { FormFields, LoginFormStyled } from './LoginForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from 'redux/user/operations';\nimport Message from 'components/Message/Message';\nimport ShowPassword from 'components/ShowPassword/ShowPassword';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useState } from 'react';\nimport { selectAuthError } from 'redux/user/selectors';\nimport Sprite from 'images/sprite.svg';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const [passwordShown, setPasswordShown] = useState(false);\n\n  const message = useSelector(selectAuthError);\n\n  const schema = yup.object().shape({\n    email: yup\n      .string()\n      .email('Email must be a valid email')\n      .min(3)\n      .max(254)\n      .required('Email is a required field'),\n    password: yup.string().required('Password is a required field').min(8),\n  });\n\n  const initialValues = { email: '', password: '' };\n\n  const onClickHandler = () => {\n    setPasswordShown(state => !state);\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n    //if (!message) resetForm();\n  };\n\n  return (\n    <LoginFormStyled>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, isSubmitting, submitCount }) => {\n          const hasEmailError =\n            submitCount > 0 && touched.email && errors.email;\n          const hasPasswordError =\n            submitCount > 0 && touched.password && errors.password;\n          const isFormSubmitted = submitCount > 0;\n\n          return (\n            <Form autoComplete=\"off\" className=\"form\">\n              <Caption>Sign in</Caption>\n              <FormFields>\n                <InputWraper\n                  className={\n                    hasEmailError ? 'error' : isFormSubmitted ? 'success' : ''\n                  }\n                >\n                  <Field\n                    type=\"text\"\n                    name=\"email\"\n                    placeholder=\" \"\n                    autoComplete=\"off\"\n                  />\n                  <label htmlFor=\"email\">Email *</label>\n                  {hasEmailError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"email\"\n                    />\n                  )}\n                  <svg className=\"icon\">\n                    <use href={`${Sprite}#icon-mail`}></use>\n                  </svg>\n                  {hasEmailError && (\n                    <svg className=\"icon-error\">\n                      <use href={`${Sprite}#icon-error`}></use>\n                    </svg>\n                  )}\n                  {!hasEmailError && isFormSubmitted && (\n                    <svg className=\"icon-success\">\n                      <use href={`${Sprite}#icon-success`}></use>\n                    </svg>\n                  )}\n                </InputWraper>\n\n                <InputWraper\n                  className={\n                    hasPasswordError\n                      ? 'error'\n                      : isFormSubmitted\n                      ? 'success'\n                      : ''\n                  }\n                >\n                  <Field\n                    type={passwordShown ? 'text' : 'password'}\n                    name=\"password\"\n                    placeholder=\" \"\n                    autoComplete=\"off\"\n                  />\n                  <label htmlFor=\"password\">Password *</label>\n\n                  {!hasPasswordError && !isFormSubmitted && (\n                    <ShowPassword\n                      clickHandler={onClickHandler}\n                      isShown={passwordShown}\n                    />\n                  )}\n                  {hasPasswordError && (\n                    <ErrorMessage\n                      className=\"error\"\n                      component=\"div\"\n                      name=\"password\"\n                    />\n                  )}\n                  <svg className=\"icon\">\n                    <use href={`${Sprite}#icon-lock`}></use>\n                  </svg>\n                  {hasPasswordError && (\n                    <svg className=\"icon-error\">\n                      <use href={`${Sprite}#icon-error`}></use>\n                    </svg>\n                  )}\n                  {!hasPasswordError && isFormSubmitted && (\n                    <svg className=\"icon-success\">\n                      <use href={`${Sprite}#icon-success`}></use>\n                    </svg>\n                  )}\n                </InputWraper>\n              </FormFields>\n              <ButtonContainer>\n                <Button className=\"type2 button\" type=\"submit\">\n                  Sign In\n                </Button>\n              </ButtonContainer>\n            </Form>\n          );\n        }}\n      </Formik>\n      {message && <Message>{message}</Message>}\n      <BottomLink to=\"/register\">Registration</BottomLink>\n    </LoginFormStyled>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { AuthPageStyled } from 'components/Styled/AuthPage.styled';\nimport BackgroundImage from 'images/AuthPage/auth-page-bg@2x.png';\n\nconst LoginPage = () => {\n  return (\n    <AuthPageStyled>\n      <img className=\"bg\" src={BackgroundImage} alt=\"bg\" />\n      <LoginForm />\n    </AuthPageStyled>\n  );\n};\n\nexport default LoginPage;\n"],"names":["Caption","styled","colors","mediaSizes","ButtonContainer","BottomLink","NavLink","InputWraper","hexToRgb","MessageStyled","children","ShowPasswordButton","ShowIcon","BsFillEyeFill","HideIcon","BsFillEyeSlashFill","isShown","clickHandler","type","onClick","AuthPageStyled","LoginFormStyled","container","FormFields","LoginForm","dispatch","useDispatch","useState","passwordShown","setPasswordShown","message","useSelector","selectAuthError","schema","yup","shape","email","min","max","required","password","onClickHandler","state","initialValues","validationSchema","onSubmit","values","resetForm","logIn","errors","touched","submitCount","isSubmitting","hasEmailError","hasPasswordError","isFormSubmitted","autoComplete","className","name","placeholder","htmlFor","component","href","Sprite","ShowPassword","Message","to","src","BackgroundImage","alt"],"sourceRoot":""}